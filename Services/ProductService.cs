using catalogo_producto_api.Database;
using catalogo_producto_api.DTO;
using catalogo_producto_api.Models;
using catalogo_producto_api.Utils;
using Microsoft.EntityFrameworkCore;

namespace catalogo_producto_api.Services
{
    public class ProductService
    {
        private readonly ApplicationDatabaseContext dbContext; // Database context for product operations
        private readonly FileStoreManager fileStoreManager;   // Utility for handling image files

        // Constructor to inject dependencies
        public ProductService(ApplicationDatabaseContext _context, FileStoreManager fileStoreManager)
        {
            this.dbContext = _context;
            this.fileStoreManager = fileStoreManager;
        }

        // Retrieve all products from the database
        public async Task<IEnumerable<Product>> GetProducts()
        {
            try
            {
                return await this.dbContext.Products.ToListAsync(); // Fetch all products
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching Product: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
        }

        // Retrieve a product by its ID
        public async Task<Product?> GetProduct(int id)
        {
            try
            {
                var product = await dbContext.Products.FindAsync(id); // Fetch product by ID

                if (product == null)
                {
                    return null; // Return null if product not found
                }

                return product; // Return the found product
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching product: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
        }

        // Retrieve a list of products where name are alike
        public async Task<IEnumerable<Product>> GetProductsByName(string name)
        {
            try
            {
                if (string.Empty == name)
                {
                    return await this.GetProducts();
                }

                // Query products where the name contains the provided search term (case-insensitive).
                var products = await this.dbContext.Products
                    .Where((product) => EF.Functions.Like(product.Name, $"%{name}%"))
                    .ToListAsync();

                return products; // Return the list of matching products.
            }
            catch (Exception ex)
            {
                // Log the error for debugging purposes.
                Console.WriteLine($"Error searching for products with names like: {name}");
                Console.WriteLine($"Something went wrong: {ex.Message}");

                // Re-throw the exception to propagate it up the call stack.
                throw;
            }
        }

        // Create a new product in the database
        public async Task<Product> CreateProduct(CreateProductDTO dto)
        {
            if (dto == null)
            {
                throw new Exception("Body is empty");
            }

            try
            {
                string fileName = await this.fileStoreManager.SaveImageAsync(dto.File); // Save the uploaded image

                Product newProduct = new Product // Create a new product object
                {
                    Id = 0, // ID will be auto-generated by the database
                    ImageUrl = fileName, // Set the image URL
                    Name = dto.Name,
                    Description = dto.Description,
                    Price = dto.Price,
                    Stock = dto.Stock
                };

                this.dbContext.Products.Add(newProduct); // Add the new product to the database
                await this.dbContext.SaveChangesAsync(); // Save changes

                return newProduct; // Return the newly created product
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error Creating Product: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
        }

        // Update an existing product in the database
        public async Task<Product?> UpdateProduct(int id, UpdateProductDTO dto)
        {
            try
            {
                var existingProduct = await this.dbContext.Products.FindAsync(id); // Find the existing product

                if (existingProduct == null)
                {
                    return null; // Return null if product not found
                }

                // Update product properties
                existingProduct.Name = dto.Name;
                existingProduct.Description = dto.Description;
                existingProduct.Price = dto.Price;
                existingProduct.Stock = dto.Stock;

                // Handle image update if a new file is provided
                if (dto.File != null && dto.File.Length > 0)
                {
                    // Delete the old image if it exists
                    if (!string.IsNullOrEmpty(existingProduct.ImageUrl))
                    {
                        fileStoreManager.DeleteImage(existingProduct.ImageUrl);
                    }

                    // Save the new image and update the ImageUrl
                    var newImageUrl = await fileStoreManager.SaveImageAsync(dto.File);
                    existingProduct.ImageUrl = newImageUrl;
                }

                await dbContext.SaveChangesAsync(); // Save changes to the database

                return existingProduct; // Return the updated product
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Failed to update the product in the database: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
            catch (IOException ex)
            {
                Console.WriteLine($"Failed to handle the image file: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An unexpected error occurred: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
        }

        // Delete a product from the database
        public async Task<Product?> DeleteProduct(int id)
        {
            try
            {
                var existingProduct = await dbContext.Products.FindAsync(id); // Find the product by ID

                if (existingProduct == null)
                {
                    return null; // Return null if product not found
                }

                dbContext.Products.Remove(existingProduct); // Remove the product from the database

                await dbContext.SaveChangesAsync(); // Save changes

                if (existingProduct.ImageUrl != string.Empty)
                {
                    fileStoreManager.DeleteImage(existingProduct.ImageUrl); // Delete the associated image file
                }

                return existingProduct; // Return the deleted product
            }
            catch (DbUpdateException ex)
            {
                Console.WriteLine($"Error when deleting product: {ex.Message}");
                throw; // Re-throw the exception for further handling
            }
        }
    }
}